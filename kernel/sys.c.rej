--- kernel/sys.c
+++ kernel/sys.c
@@ -382,11 +403,49 @@
  *	Shutdown everything and perform a clean reboot.
  *	This is not safe to call in interrupt context.
  */
+
+void power_off_registertimer(struct timer_list* ptimer, unsigned long timeover )
+{
+	printk("%s\n",__func__);
+	init_timer(ptimer);
+	ptimer->expires = get_jiffies_64() + timeover;
+	ptimer->data = (long) NULL;
+	ptimer->function = power_off_timeout;
+	add_timer(ptimer);
+}
+
+void power_off_timeout(unsigned long arg)
+{
+printk("%s\n",__func__);
+	//smem_flag->info = 0xAEAEAEAE;
+	//msm_proc_comm_reset_modem_now();
+	machine_power_off();
+}
+
+static void migrate_to_reboot_cpu(void)
+{
+	/* The boot cpu is always logical cpu 0 */
+	int cpu = 0;
+
+	cpu_hotplug_disable();
+
+	/* Make certain the cpu I'm about to reboot on is online */
+	if (!cpu_online(cpu))
+		cpu = cpumask_first(cpu_online_mask);
+
+	/* Prevent races with other tasks migrating this task */
+	current->flags |= PF_NO_SETAFFINITY;
+
+	/* Make certain I only run on the appropriate processor */
+	set_cpus_allowed_ptr(current, cpumask_of(cpu));
+}
+
+
 void kernel_restart(char *cmd)
 {
 	printk("[kernel_restart] START.\n");
 	kernel_restart_prepare(cmd);
-	disable_nonboot_cpus();
+	migrate_to_reboot_cpu();
 	syscore_shutdown();
 	if (!cmd)
 		printk(KERN_EMERG "Restarting system.\n");
@@ -434,10 +496,11 @@
 void kernel_power_off(void)
 {
 	printk("[kernel_power_off] START.\n");
+	power_off_registertimer(&power_off_timer, POWER_OFF_TIME);
 	kernel_shutdown_prepare(SYSTEM_POWER_OFF);
 	if (pm_power_off_prepare)
 		pm_power_off_prepare();
-	disable_nonboot_cpus();
+	migrate_to_reboot_cpu();
 	syscore_shutdown();
 	printk(KERN_EMERG "Power down.\n");
 	kmsg_dump(KMSG_DUMP_POWEROFF);
